# Static schemas, dynamic schema and action schema.
# Should we consider Part-whole relation for liquids? With the notion - part of the liquid left the source.
# Todo : Explicitly state source and destination containers? Liquid moves UP in Dest and DOWN in Source.

# Affordance to check - pouring is possible only if there is source and destination in reachable space [NEAR-FAR]
# Containedobject can just be any object, not necessarily liquid.
p_0: canContain(?x,?l), Thing(?l) => Container(?x)

# Containment disposition
r_1: Container(?x),  Thing(?l), contains(?x, ?l) => canPour(?x, ?l)
r_1a: canPour(?x ,?l) => SourceRole(?x)
r_2: contains(?x, ?l) => hasDisp(?x, Containment)
#r_2a: contains(?x, ?l) => inside(?l, ?x)
r_2b: contains(?x, ?l), hasOpening(?x, ?o), hasFacingUpwards(?o) => holdUpright(?x)

# The opening of the source has to be within the boundary of the destination (unless the spout of the source
# is long and can create a flow that will reach the destination).
# Containers has to be open to pour - hasopening means that the object is open or has a means to let the liquid out
# should we go with l following a path and the goal is contained in d
# below is not needed 4 is sufficient
r_3: canPour(?x, ?l), Container(?y), SourceRole(?x), DestinationRole(?y), near(?x, ?y), hasOpening(?x,?o), hasOpening(?y,?p), within(?o,?p) => canPourTo(?x, ?y)
#4: Container(?x), Container(?y), -near(?x, ?y) => -canPourTo(?x, ?y)

4: canPourTo(?s,?y), Container(?s), isTilted(?s), hasOpening(?s,?o), contains(?s,?x), passThrough(?x,?o), partOf(?l,?x), hasOpening(?d,?p), within(?o,?p), inside(?l, ?y) => poursTo(?s, ?y)
5: contains(?x, ?l) => inside(?l, ?x)

# When the liquid flows out, it follows a trajectory. Pouring â€” substance(?) moves along a path(?) from a source(?) to a destination(?). 
# Here the source and destination are containers. Containment and SPG. IN and OUT for Source and Destination(?)

# In, Out and a Boundary/opening. Opening that can afford to let the liquid out and then in

# Things contained inside the container can only come out of an opening
# Liquid cannot penetrate solid objects
# adapted from hobbsian road ex

6: Container(?w), Thing(?x), inside(?x,?w), outside(?y,?w), hasOpening(?w,?z), willBeAt(?x,?y) => passThrough(?x,?z)
7: Container(?w), Thing(?x), inside(?x,?w), outside(?y,?w), hasOpening(?w,?z), willBeAt(?x,?y) => -canAvoid(?x,?z)
8: Container(?w), Thing(?x), inside(?x,?w), outside(?y,?w), passThrough(?x,?z), willBeAt(?x,?y) => Opening(?z)

# Verticality - gives the quantity of liquid in the container
# Some notion of overflow - liquid outside the destination. In this case, we need to stop pouring
# movesUp - can you detect it
9: Container(?s), Container(?d), poursTo(?s,?d), contains(?s,?w), partOf(?l,?w), contains(?d,?l), movesUp(?l), outside(?o,?d), -inside(?o,?s), partOf(?p,?l), willBeAt(?p,?o) => overflows(?d) # Should we state the liquid is overflowing?
10: Container(?s), Container(?d), poursTo(?s,?d), overflows(?d) => -canPourTo(?s,?d)

10a: Container(?s), Container(?d), SourceRole(?s), DestinationRole(?d), poursTo(?s, ?d), -canPourTo(?s, ?d), LocationRole(?l), at(?s, ?l), hasDestination(?s, ?g) => willBeUprightAt(?s, ?g)
10b: Thing(?x), contains(?s,?x), LocationRole(?g), at(?s,?g), hasOpening(?s, ?o), -passThrough(?x, ?o), -canPourTo(?s,?d) => uprightAt(?s,?g)

# what does spilling mean? - when a piece of liquid is outside the destination. We need to adjust the pose or the tilt angle
# todo - can we state poursTo already
11: Container(?s), Container(?d), contains(?s,?l), poursTo(?s,?d),  partOf(?p,?l), outside(?o,?d), willBeAt(?p,?o) => isSpilled(?p)
## todo : adjustMovement could be tilting less or move away or towards
12: poursTo(?s,?d), contains(?s,?l), partOf(?p,?l), isSpilled(?p) => adjustMovement(?s,?d)

# When the container is tipped, liquid flows out.
13: contains(?s,?l), hasOpening(?s,?o), isTilted(?s) => passThrough(?l,?o)

# When the container is tipped rapidly or along a greater angle, more water comes out. Set the vertical axis along the source as zero


# When the liquid is spilling or flowing outside the destination container, decrease the angle of 
# tipping to stop the flow of liquid.

14: inside(?x, ?y) => -outside(?x, ?y)
15: near(?x, ?y) => near(?y, ?x)
15a: isTilted(?s) => -upright(?s)
## Plane at a height = height of the destination with a normal perpendicular to the ground (z= height of the destination).

### Below only states if the distance between the source and destination is <= Height of the source. This can be used to
### make sure if the pouring is possible. Condition 1. 
### largerDimension --- Either height or width (long spout)
15a: Container(?s), largerDimension(?s, ?hs), Container(?d), distanceBetweenSourceAndDest(?dist), lessThanEqual(?dist,?hs) => near(?s, ?d)

### Todo: With a longer spout, the distance bet S and d can be longer

## When to tilt - source is held above the height of the destination. cantilt
## This is not the case for source with a long spout. But we did not make a case for the tilting space
## todo: Should we state that there should be no object between s and d?
16: Container(?s), Thing(?x), contains(?s,?x), Container(?d),  near(?s, ?d), above(?s, ?d), hasOpening(?s,?o), hasOpening(?d,?p) => canTiltAbove(?s, ?d)

### Todo: Tilting space is a sphere(almost) anywhere the openings lie within

### Source moves up and ends at a point in a plane above the Destination. IS: SPG. G is in the boundaries of the circle
17: Container(?s), Thing(?x), contains(?s,?x), Container(?d), hasPeriphery(?d, ?p), LocationRole(?l), at(?s, ?l), LocationRole(?g), above(?g, ?p), hasDestination(?s, ?g) => willBeAt(?s, ?g)

### Tilting start pose and an end pose again as IS: SPG?. Here G is a pose where the liquid comes out.
### Tilt destination is a location at which the openings of s is within ds, liquid pass through s's opening and is contained inside d. 
## 18o: hasTiltDestination(?s, ?g) => LocationRole(?g), willbeAt(?s, ?g)    ###, poursTo(?s, ?d)

18a: Container(?src), Container(?dest), SourceRole(?src), DestinationRole(?dest), near(?src, ?dest), -goalReached(?dest), hasOpeningWithin(?src, ?dest)  => canPourTo(?src, ?dest)  ### Add this later hasOpeningWithin(?src, ?dest)
18b: canPourTo(?src, ?dest), -isTilted(?src) => P_increaseTilting(?src)

# For the liquid to come out of the container, the angle of tipping has to be increased
18:  SourceRole(?s), DestinationRole(?d), -poursTo(?s,?d), canPourTo(?s,?d), -goalReached(?d) => P_increaseTilting(?s)
18c:  SourceRole(?s), DestinationRole(?d), poursTo(?s,?d), slowFlowFrom(?s, ?d), -goalReached(?d) => P_increaseTilting(?s)
18d:  SourceRole(?s), DestinationRole(?d), poursTo(?s,?d), fastFlowFrom(?s, ?d), -goalReached(?d) => P_decreaseTilting(?s)
## Check 10a and 10b. Todo: Can we state Decreasing Tilt leads to S upright
##18a: poursTo(?s,?d), isTilted(?s), -canPourTo(?s,?d) => P_decreaseTilting(?s)

19a: SourceRole(?s), DestinationRole(?d), canPourTo(?s, ?d), isTilted(?s) => Q_poursTo(?s, ?d)
19:  SourceRole(?src), DestinationRole(?dest), -near(?src,?dest) => P_moveTowards(?dest)

20: SourceRole(?s), DestinationRole(?d), poursTo(?s,?d), isTilted(?s), goalReached(?d) => P_decreaseTilting(?s)
20a: SourceRole(?s), DestinationRole(?d), near(?s,?d), goalReached(?d) => -canPourTo(?s, ?d)
20b: SourceRole(?s), DestinationRole(?d), isTilted(?d) => -canPourTo(?s, ?d)
##20b: SourceRole(?s), DestinationRole(?d), -isTilted(?s), goalReached(?d) => -canPourTo(?s, ?d)

##21: Container(?s), SourceRole(?s), Container(?d) => DestinationRole(?d)
22: SourceRole(?s), DestinationRole(?d), -canPourTo(?s, ?d), -upright(?s) => P_decreaseTilting(?s)

# At the moment, there can be only one conclusion so splitting the motion command in different rules
23a: SourceRole(?src), DestinationRole(?dest), -hasOpeningWithin(?src, ?dest), contains(?src, ?l), above(?src, ?dest), behind(?dest, ?src), -goalReached(?dest)  => P_moveBack(?src)
23b: SourceRole(?src), DestinationRole(?dest), -hasOpeningWithin(?src, ?dest), contains(?src, ?l), above(?src, ?dest), inFrontOf(?dest, ?src), -goalReached(?dest)  => P_moveForward(?src)
23c: SourceRole(?src), DestinationRole(?dest), -hasOpeningWithin(?src, ?dest), contains(?src, ?l), above(?src, ?dest), leftOf(?dest, ?src), -goalReached(?dest)  => P_moveLeft(?src)
23d: SourceRole(?src), DestinationRole(?dest), -hasOpeningWithin(?src, ?dest), contains(?src, ?l), above(?src, ?dest), rightOf(?dest, ?src), -goalReached(?dest)  => P_moveRight(?src)
#23e: SourceRole(?src), DestinationRole(?dest), Thing(?l), hasOpeningWithin(?src, ?dest), -goalReached(?dest), contains(?src, ?l), isSpilling(?l)  => P_decreaseTilting(?src)
#23f: SourceRole(?src), DestinationRole(?dest), Thing(?l), hasOpeningWithin(?src, ?dest), -goalReached(?dest), contains(?src, ?l), isSpilling(?l)  => -canPourTo(?src, ?dest)

# For the source container to move above the destination container
23f: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), -above(?src, ?dest), -goalReached(?dest)  => P_moveUp(?src, ?dest)
23g: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), farAbove(?src, ?dest), -goalReached(?dest)  => P_moveDown(?src, ?dest)
# ToDo: How high it can move depends on the length and breadth of the destination container

# Ask Mihai : How to describe that we can use the rules to anticipate how the situation evolves?
# When the source is tilted and the liquid is pouring, then the contents in the destination increases given that there
# is no spilling.  what follows the current state? liquid level increases in the dest
# current state - liquid leaves the src and enters the dest. pouring is continued,
# following state - containedIn(Liquid, dest), movesUp(liquid, dest)
# Can we use it to reduce tilting angle, when the goal is almost reached
#20a > 18a

24: hasPath(?l, ?p), PathRole(?p), Thing(?l), Trajector(?l), movesAwayFrom(?l, ?s), movesTowards(?l, ?d), SourceRole(?s), DestinationRole(?d) => pours(?s, ?l)
24a: SourceRole(?s), DestinationRole(?d), Thing(?l), movesAwayFrom(?l, ?s), movesTowards(?l, ?d) => poursTo(?s, ?d)
24b: SourceRole(?s), DestinationRole(?d), Thing(?l), poursTo(?s,?d)  => Q_movesUpIn(?l, ?d)
# 24c: SourceRole(?s), DestinationRole(?d), Thing(?l), poursTo(?s,?d),  movesUpIn(?l, ?d) => Q_almostFull(?d)
24d: SourceRole(?s), DestinationRole(?d), Thing(?l), poursTo(?s,?d),  movesUpIn(?l, ?d) => Q_almostGoalReached(?d)

# 25: SourceRole(?s), DestinationRole(?d), poursTo(?s,?d), almostFull(?d), -goalReached(?d) => P_decreaseTilting(?s)
25a: SourceRole(?s), DestinationRole(?d), poursTo(?s,?d), almostGoalReached(?d), -goalReached(?d) => P_decreaseTilting(?s)

25a > 18c

# Liquid flows out through the lowest corner(point) in the container while tilting, we want the water flow through one point so that we can control the flow
# Not sure if the below should be a query to perception or simulation
26a: SourceRole(?s), DestinationRole(?d), hasEdges(?s), poursTo(?s, ?d), CornerRegion(?p), isTilted(?s), hasLowestOpeningCorner(?s, ?p), aligned(?p, ?d), -goalReached(?d) => Q_pourThrough(?s, ?p)

# This is to rotate the source towards the destination -> rotate along z axis
26b: SourceRole(?s), DestinationRole(?d), hasEdges(?s), CornerRegion(?p), isTilted(?s), hasLowestOpeningCorner(?s, ?p), -aligned(?d, ?p), -goalReached(?d) => P_rotateTowards(?p, ?d)
26c: SourceRole(?s), DestinationRole(?d), hasEdges(?s), CornerRegion(?p), isTilted(?s), hasLowestOpeningCorner(?s, ?p), -aligned(?d, ?p), -goalReached(?d), RotationDirection(?dir) => P_rotateAlong(?s, ?dir)
26d: SourceRole(?s), hasEdges(?s), CornerRegion(?p), hasLowestOpeningCorner(?s, ?p) => pourThrough(?s, ?p)

### Which direction to move to in case of spill

### In case of overflow, move back to upright

# Scraping
27a: SourceRole(?s), DestinationRole(?d), hasEdges(?s), CornerRegion(?p), isTilted(?s), hasLowestOpeningCorner(?s, ?p), aligned(?d, ?p), supports(?s, ?o), -goalReached(?d), Solid(?o) => Q_movesTowards(?o, ?d)
27b: SourceRole(?s), DestinationRole(?d),  Solid(?o), supports(?s, ?o), -movesTowards(?o, ?d), -goalReached(?d) => P_pushTowards(?o, ?d)

# collision. ToDO : w.r.t the robot
#28: SourceRole(?s), DestinationRole(?d), contact(?s, ?d) => -canPourTo(?s, ?d)
28a: contact(?a, ?b) => contact(?b, ?a)
28b: SourceRole(?src), DestinationRole(?dest), contact(?src, ?dest), behind(?dest, ?src) => P_moveForward(?src)
28c: SourceRole(?src), DestinationRole(?dest), contact(?src, ?dest), inFrontOf(?dest, ?src)  => P_moveBack(?src)
28d: SourceRole(?src), DestinationRole(?dest), contact(?src, ?dest), leftOf(?dest, ?src)  => P_moveRight(?src)
28e: SourceRole(?src), DestinationRole(?dest), contact(?src, ?dest), rightOf(?dest, ?src)  => P_moveLeft(?src)
# above and below
28f: SourceRole(?src), DestinationRole(?dest), contact(?src, ?dest) => P_moveUp(?src)

# spilling. ToDO : w.r.t the src cup
29: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), isSpilling(?l), hasOpeningWithin(?src, ?dest), -undershoot(?l) => overshoot(?l)
29b: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), overshoot(?l), behind(?dest, ?src) => P_moveForward(?src)
29c: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), overshoot(?l), inFrontOf(?dest, ?src)  => P_moveBack(?src)
29d: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), overshoot(?l), leftOf(?dest, ?src)  => P_moveRight(?src)
29e: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), overshoot(?l), rightOf(?dest, ?src)  => P_moveLeft(?src)
29f: SourceRole(?src), DestinationRole(?dest), contains(?src, ?l), overshoot(?l), above(?src, ?dest) => P_moveDown(?src)

